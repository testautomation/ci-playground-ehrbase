version: 2.1

# Copyright (c) 2019 Wladislaw Wagner (Vitasystems GmbH).
# This file is part of Project EHRbase
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on a, Pablo Pazosn Vitasystems GmbHS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#   88888888888  88        88  88888888ba   88888888ba         db         ad88888ba   88888888888
#   88           88        88  88      "8b  88      "8b       d88b       d8"     "8b  88
#   88           88        88  88      ,8P  88      ,8P      d8'`8b      Y8,          88
#   88aaaaa      88aaaaaaaa88  88aaaaaa8P'  88aaaaaa8P'     d8'  `8b     `Y8aaaaa,    88aaaaa
#   88"""""      88""""""""88  88""""88'    88""""""8b,    d8YaaaaY8b      `"""""8b,  88"""""
#   88           88        88  88    `8b    88      `8b   d8""""""""8b           `8b  88
#   88           88        88  88     `8b   88      a8P  d8'        `8b  Y8a     a8P  88
#   88888888888  88        88  88      `8b  88888888P"  d8'          `8b  "Y88888P"   88888888888



workflows:
  version: 2

  # WORKFLOW 1/3
  build-and-test:
    jobs:
      - build-artifacts:
          context: org-global
          filters:
            branches:
              ignore:
                - /release\/.*/
                - master
                - /sync\/.*/
                - /feature/sync\/.*/

      - run-unit-tests:
          context: org-global
          filters:
            branches:
              ignore:
                - /release\/.*/
                - master
                - /sync\/.*/
                - /feature/sync\/.*/
      
      - run-SDK-integration-tests:
          context: org-global
          requires:
            - build-artifacts
        
      - dependency-check:
          context: org-global
          requires:
            - build-artifacts

      - COMPOSITION-tests-1:
          context: org-global
          requires:
            - build-artifacts
          # post-steps:
          #   - provide-test-status-report-via-slack #

      - COMPOSITION-tests-2:
          context: org-global
          requires:
            - build-artifacts

      - COMPOSITION-tests-3:
          context: org-global
          requires:
            - build-artifacts

      - COMPOSITION-tests-4:
          context: org-global
          requires:
            - build-artifacts

      - CONTRIBUTION-test:
          context: org-global
          requires:
            - build-artifacts

      - DIRECTORY-test:
          context: org-global
          requires:
            - build-artifacts

      - EHRSERVICE-test:
          context: org-global
          requires:
            - build-artifacts

      - EHRSTATUS-test:
          context: org-global
          requires:
            - build-artifacts

      - KNOWLEDGE-test:
          context: org-global
          requires:
            - build-artifacts

      - QUERYSERVICE-test-1:
          context: org-global
          requires:
            - build-artifacts

      - QUERYSERVICE-test-2:
          context: org-global
          requires:
            - build-artifacts
      
      - SECURITY-test:
          context: org-global
          requires:
            - build-artifacts

      - ROBOT-TEST-REPORT:
          context: org-global
          requires:
            - COMPOSITION-tests-1
            - COMPOSITION-tests-2
            - COMPOSITION-tests-3
            - COMPOSITION-tests-4
            - CONTRIBUTION-test
            - DIRECTORY-test
            - EHRSERVICE-test
            - EHRSTATUS-test
            - KNOWLEDGE-test
            - QUERYSERVICE-test-1
            - QUERYSERVICE-test-2
            - SECURITY-test

      - sonar-analysis:
          context: org-global
          requires:
            - build-artifacts
            - run-unit-tests
            - dependency-check
            - COMPOSITION-tests-1
            - COMPOSITION-tests-2
            - COMPOSITION-tests-3
            - COMPOSITION-tests-4
            - CONTRIBUTION-test
            - DIRECTORY-test
            - EHRSERVICE-test
            - EHRSTATUS-test
            - KNOWLEDGE-test
            - QUERYSERVICE-test-1
            - QUERYSERVICE-test-2
            - SECURITY-test





  # WORKFLOW 2/3
  release:
    jobs:
      - build-artifacts:
          context: org-global
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/

      - run-unit-tests:
          context: org-global
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/

      - run-SDK-integration-tests:
          context: org-global
          requires:
            - build-artifacts

      - dependency-check:
          context: org-global
          requires:
            - build-artifacts

      - COMPOSITION-tests-1:
          context: org-global
          requires:
            - build-artifacts
          # post-steps:
          #   - provide-test-status-report-via-slack #

      - COMPOSITION-tests-2:
          context: org-global
          requires:
            - build-artifacts

      - COMPOSITION-tests-3:
          context: org-global
          requires:
            - build-artifacts

      - COMPOSITION-tests-4:
          context: org-global
          requires:
            - build-artifacts

      - CONTRIBUTION-test:
          context: org-global
          requires:
            - build-artifacts

      - DIRECTORY-test:
          context: org-global
          requires:
            - build-artifacts

      - EHRSERVICE-test:
          context: org-global
          requires:
            - build-artifacts

      - EHRSTATUS-test:
          context: org-global
          requires:
            - build-artifacts

      - KNOWLEDGE-test:
          context: org-global
          requires:
            - build-artifacts

      - QUERYSERVICE-test-1:
          context: org-global
          requires:
            - build-artifacts

      - QUERYSERVICE-test-2:
          context: org-global
          requires:
            - build-artifacts

      - SECURITY-test:
          context: org-global
          requires:
            - build-artifacts

      - ROBOT-TEST-REPORT:
          context: org-global
          requires:
            - COMPOSITION-tests-1
            - COMPOSITION-tests-2
            - COMPOSITION-tests-3
            - COMPOSITION-tests-4
            - CONTRIBUTION-test
            - DIRECTORY-test
            - EHRSERVICE-test
            - EHRSTATUS-test
            - KNOWLEDGE-test
            - QUERYSERVICE-test-1
            - QUERYSERVICE-test-2
            - SECURITY-test

      - sonar-analysis:
          context: org-global
          requires:
            - build-artifacts
            - run-unit-tests
            - dependency-check
            - COMPOSITION-tests-1
            - COMPOSITION-tests-2
            - COMPOSITION-tests-3
            - COMPOSITION-tests-4
            - CONTRIBUTION-test
            - DIRECTORY-test
            - EHRSERVICE-test
            - EHRSTATUS-test
            - KNOWLEDGE-test
            - QUERYSERVICE-test-1
            - QUERYSERVICE-test-2
            - SECURITY-test





  # WORKFLOW 3/3
  synced-feature-check:
    description: |
      WHAT THIS WORKFLOW DOES
      =======================

      CI kicks in after push (of sync/* branch) to ehrbase repo. It will
      1. pull (from sync/123_example-issue), build, test (unit), install SDK (makes SDK available from ~/.m2)
      2. build (using locally installed SDK), test (unit) and package ehrbase (.../target/.jar)
      3. start ehrbase server (from previously packaged .jar)
      4. run SDK's (java) integration tests
      5. run EHRbase's (robot) integration tests
      6. create robot test report

      HOW TO USE THIS WORKFLOW?
      =========================

      1. create TWO branches "sync/[issue-id]_name branches" respectively

        - ehrbase repo       --> i.e.    sync/123_example-issue
        - openehr_sdk repo   --> i.e.    sync/123_example-issue

      2. apply your code changes
      3. push to openehr_sdk repo (NO CI will be triggered)
      4. push to ehrbase repo (CI will trigger this workflow)
      5. create TWO PRs (one in ehrbase, one in openehr_sdk)
      6. WARNING:

      ///////////////////////////////////////////////////////////////////////
      ///                                                                 ///
      ///  - make sure that both PRs are reviewed and ready to be merged  ///
      ///    at the same time!                                            ///
      ///  - make sure to sync both PRs w/ develop before merging!        ///
      ///  - open each PR in it's own browser window                      ///
      ///  - MERGE BOTH PRs AT THE SAME TIME!                             ///
      ///                                                                 ///
      //////////////////////////////////////////////////////////////////////
    
    # when:
    #   or:
    #     - equal: [ sync/*, << pipeline.git.branch >> ]
    #     - equal: [ feature/sync/*, << pipeline.git.branch >> ]

    jobs:
      - pull build install sdk from sync-branch:
          filters:
            branches:
              only:
                - /^sync\/.*/
                - /^feature\/sync\/.*/
      - build package ehrbase with locally installed sdk:
          requires:
            - pull build install sdk from sync-branch
      - run java integration tests - sdk:
          requires:
            - build package ehrbase with locally installed sdk
      - COMPOSITION-tests-1:
          context: org-global
          requires:
            - build package ehrbase with locally installed sdk
      - COMPOSITION-tests-2:
          context: org-global
          requires:
            - build package ehrbase with locally installed sdk
      - COMPOSITION-tests-3:
          context: org-global
          requires:
            - build package ehrbase with locally installed sdk
      - COMPOSITION-tests-4:
          context: org-global
          requires:
            - build package ehrbase with locally installed sdk
      - CONTRIBUTION-test:
          context: org-global
          requires:
            - build package ehrbase with locally installed sdk
      - DIRECTORY-test:
          context: org-global
          requires:
            - build package ehrbase with locally installed sdk
      - EHRSERVICE-test:
          context: org-global
          requires:
            - build package ehrbase with locally installed sdk
      - EHRSTATUS-test:
          context: org-global
          requires:
            - build package ehrbase with locally installed sdk
      - KNOWLEDGE-test:
          context: org-global
          requires:
            - build package ehrbase with locally installed sdk
      - QUERYSERVICE-test-1:
          context: org-global
          requires:
            - build package ehrbase with locally installed sdk
      - QUERYSERVICE-test-2:
          context: org-global
          requires:
            - build package ehrbase with locally installed sdk
      - SECURITY-test:
          context: org-global
          requires:
            - build package ehrbase with locally installed sdk
      - ROBOT-TEST-REPORT:
          context: org-global
          requires:
            - COMPOSITION-tests-1
            - COMPOSITION-tests-2
            - COMPOSITION-tests-3
            - COMPOSITION-tests-4
            - CONTRIBUTION-test
            - DIRECTORY-test
            - EHRSERVICE-test
            - EHRSTATUS-test
            - KNOWLEDGE-test
            - QUERYSERVICE-test-1
            - QUERYSERVICE-test-2
            - SECURITY-test





jobs:
  #           88    ,ad8888ba,    88888888ba    ad88888ba
  #           88   d8"'    `"8b   88      "8b  d8"     "8b
  #           88  d8'        `8b  88      ,8P  Y8,
  #           88  88          88  88aaaaaa8P'  `Y8aaaaa,
  #           88  88          88  88""""""8b,    `"""""8b,
  #           88  Y8,        ,8P  88      `8b          `8b
  #   88,   ,d88   Y8a.    .a8P   88      a8P  Y8a     a8P
  #    "Y8888P"     `"Y8888Y"'    88888888P"    "Y88888P"



  pull build install sdk from sync-branch:
    # executor: machine-ubuntu-2004
    executor: docker-python3-java11
    steps:
      - checkout
      - install-maven
      - git-clone-sdk-repo
      - git-checkout-sdk-sync-branch
      - cache-out-sdk-m2-dependencies-sync-branch
      - maven-install-sdk
      - cache-in-sdk-m2-dependencies-sync-branch
      - save-local-sdk-installation
      - collect-sdk-unittest-results
      - save-skd-test-results


  build package ehrbase with locally installed sdk:
    # executor: machine-ubuntu-2004
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      - restore-local-sdk-installation
      - cache-out-ehrbase-m2-dependencies-syncbranch
      - build-and-test-ehrbase
      - cache-in-ehrbase-m2-dependencies-syncbranch
      - save-packaged-ehrbase-jar
      - collect-ehrbase-unittest-results
      - save-ehrbase-test-results


  run java integration tests - sdk:
    # executor: machine-ubuntu-2004
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      - restore-local-sdk-installation
      - restore-packaged-ehrbase-jar
      - cache-out-ehrbase-m2-dependencies-syncbranch
      - start-ehrbase-and-run-java-integration-sdk-tests
      - collect-sdk-integrationtest-results
      - save-skd-test-results


  build-artifacts:
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      - restore-build-artifacts-job-caches
      - maven-package
      - save-packaged-ehrbase-jar
      - save-build-artifacts-job-caches

  dependency-check:
    executor: docker-python3-java11
    steps:
      - checkout
      - install-maven
      - restore-packaged-ehrbase-jar
      - restore-dependency-check-job-caches
      - run-dependency-check
      - persist-dependency-check-results
      - save-dependency-check-job-caches

  run-unit-tests:
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      - restore-packaged-ehrbase-jar
      - restore-unit-tests-job-caches
      - maven-test
      - save-unit-tests-job-caches
      - persist-unit-test-coverage

  run-SDK-integration-tests:
    description: Run openEHR_SDK's Java integration tests (w/ EHRbase + DB running).
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - attach-target-folder
      - git-clone-sdk-repo
      - cache-out-sdk-m2-dependencies
      - start-ehrbase-and-run-all-sdk-tests
      - cache-in-sdk-m2-dependencies
      - collect-sdk-unittest-results
      - collect-sdk-integrationtest-results
      - save-skd-test-results
  
  COMPOSITION-tests-1:
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - restore-packaged-ehrbase-jar
      - run-robot-tests:
          include-tags: "compositionANDjson1"
          test-suite-path: "COMPOSITION_TESTS"
          test-suite-name: "COMPOSITION_1"

  COMPOSITION-tests-2:
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - restore-packaged-ehrbase-jar
      - run-robot-tests:
          include-tags: "compositionANDjson2"
          test-suite-path: "COMPOSITION_TESTS"
          test-suite-name: "COMPOSITION_2"

  COMPOSITION-tests-3:
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - restore-packaged-ehrbase-jar
      - run-robot-tests:
          include-tags: "compositionANDxml1"
          test-suite-path: "COMPOSITION_TESTS"
          test-suite-name: "COMPOSITION_3"

  COMPOSITION-tests-4:
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - restore-packaged-ehrbase-jar
      - run-robot-tests:
          include-tags: "compositionANDxml2"
          test-suite-path: "COMPOSITION_TESTS"
          test-suite-name: "COMPOSITION_4"

  CONTRIBUTION-test:
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - restore-packaged-ehrbase-jar
      - run-robot-tests:
          include-tags: "CONTRIBUTION"
          test-suite-path: "CONTRIBUTION_TESTS"
          test-suite-name: "CONTRIBUTION"

  DIRECTORY-test:
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - restore-packaged-ehrbase-jar
      - run-robot-tests:
          include-tags: "directory"
          test-suite-path: "DIRECTORY_TESTS"
          test-suite-name: "DIRECTORY"

  EHRSERVICE-test:
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - restore-packaged-ehrbase-jar
      - run-robot-tests:
          include-tags: "EHR_SERVICE"
          test-suite-path: "EHR_SERVICE_TESTS"
          test-suite-name: "EHR_SERVICE"

  EHRSTATUS-test:
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - restore-packaged-ehrbase-jar
      - run-robot-tests:
          include-tags: "EHR_STATUS"
          test-suite-path: "EHR_STATUS_TESTS"
          test-suite-name: "EHR_STATUS"

  KNOWLEDGE-test:
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - restore-packaged-ehrbase-jar
      - run-robot-tests:
          include-tags: "KNOWLEDGE"
          test-suite-path: "KNOWLEDGE_TESTS"
          test-suite-name: "KNOWLEDGE"

  QUERYSERVICE-test-1:
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - restore-packaged-ehrbase-jar
      - run-robot-tests:
          include-tags: "aql_adhoc-queryANDempty_db"
          test-suite-path: "QUERY_SERVICE_TESTS"
          test-suite-name: "ADHOC-QUERY-1"

  QUERYSERVICE-test-2:
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - restore-packaged-ehrbase-jar
      - run-robot-tests:
          include-tags: "aql_adhoc-queryANDloaded_db"
          test-suite-path: "QUERY_SERVICE_TESTS"
          test-suite-name: "ADHOC-QUERY-2"
  
  SECURITY-test:
    executor: machine-ubuntu-2004
    steps:
      - checkout
      - install-and-configure-keycloak
      - restore-packaged-ehrbase-jar
      - run-robot-tests-with-oauth:
          include-tags: "OAUTH"
          # test-suite-path: ""
          test-suite-name: "KEYCLOAK-OAUTH"

  ROBOT-TEST-REPORT:
    executor: docker-python3-java11
    steps:
      - restore-test-results-folder
      - merge-robot-outputs

  sonar-analysis:
    executor: docker-python3-java11
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci
      - restore-sonar-analysis-job-caches
      - run-sonar-analysis
      - save-sonar-analysis-job-caches










commands:
  #     ,ad8888ba,    ,ad8888ba,    88b           d88  88b           d88         db         888b      88  88888888ba,     ad88888ba
  #    d8"'    `"8b  d8"'    `"8b   888b         d888  888b         d888        d88b        8888b     88  88      `"8b   d8"     "8b
  #   d8'           d8'        `8b  88`8b       d8'88  88`8b       d8'88       d8'`8b       88 `8b    88  88        `8b  Y8,
  #   88            88          88  88 `8b     d8' 88  88 `8b     d8' 88      d8'  `8b      88  `8b   88  88         88  `Y8aaaaa,
  #   88            88          88  88  `8b   d8'  88  88  `8b   d8'  88     d8YaaaaY8b     88   `8b  88  88         88    `"""""8b,
  #   Y8,           Y8,        ,8P  88   `8b d8'   88  88   `8b d8'   88    d8""""""""8b    88    `8b 88  88         8P          `8b
  #    Y8a.    .a8P  Y8a.    .a8P   88    `888'    88  88    `888'    88   d8'        `8b   88     `8888  88      .a8P   Y8a     a8P
  #     `"Y8888Y"'    `"Y8888Y"'    88     `8'     88  88     `8'     88  d8'          `8b  88      `888  88888888Y"'     "Y88888P"
  #                            88
  #                            88                         ,d             ,d                             ,d
  #                            88                         88             88                             88
  #   8b,dPPYba,   ,adPPYba,   88,dPPYba,    ,adPPYba,  MM88MMM        MM88MMM  ,adPPYba,  ,adPPYba,  MM88MMM  ,adPPYba,
  #   88P'   "Y8  a8"     "8a  88P'    "8a  a8"     "8a   88             88    a8P_____88  I8[    ""    88     I8[    ""
  #   88          8b       d8  88       d8  8b       d8   88             88    8PP"""""""   `"Y8ba,     88      `"Y8ba,
  #   88          "8a,   ,a8"  88b,   ,a8"  "8a,   ,a8"   88,            88,   "8b,   ,aa  aa    ]8I    88,    aa    ]8I
  #   88           `"YbbdP"'   8Y"Ybbd8"'    `"YbbdP"'    "Y888          "Y888  `"Ybbd8"'  `"YbbdP"'    "Y888  `"YbbdP"'
  #


  # USE THIS COMMAND W/ DOCKER EXECUTOR ONLY!!! 
  run-robot-tests:
    description: Run integration tests written in Robot Framework
    parameters:
      include-tags:
        description: Which tests to inclue by TAGs (Robot syntax applies!)
        type: string
      test-suite-path:
        description: Target test-suite given by it's folder name e.g. COMPOSITION_TESTS
        type: string
      test-suite-name:
        description: Titel of generated Robot Log/Report.html
        type: string
    steps:
      # - cache-out-python-requirements
      - install-maven
      - install-python3-requirements
      # - run: jps
      # - run:
      #     name: Wait until EHRbase server is ready
      #     command: |
      #       grep -m 1 "Started EhrBase in" <(tail -f log)
      - run:
          name: START EHRBASE SERVER AND EXECUTE ROBOT TESTS
          no_output_timeout: 30m
          command: |
            ls -la
            EHRbase_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            echo ${EHRbase_VERSION}
            java -jar application/target/application-${EHRbase_VERSION}.jar --cache.enabled=false > log &
            grep -m 1 "Started EhrBase in" <(tail -f log)
            jps
            cd ~/projects/tests
            robot --include << parameters.include-tags >> \
                  --exclude TODO -e future -e obsolete -e libtest \
                  --console dotted \
                  --loglevel TRACE \
                  --noncritical not-ready \
                  --flattenkeywords for \
                  --flattenkeywords foritem \
                  --flattenkeywords name:_resources.* \
                  --outputdir results/<< parameters.test-suite-name >> \
                  --name << parameters.test-suite-name >> \
                  -v nodocker \
                  robot/<< parameters.test-suite-path >>/
      # - cache-in-python-requirements
      - save-test-results-folder
      - store_test_results:
          path: ~/projects/tests/results/
      - store_artifacts:
          path: ~/projects/tests/results/


  run-robot-tests-with-oauth:
    description: Run selected integration tests w/ active Keycloak OAuth2 authentication
    parameters:
      include-tags:
        description: Which tests to inclue by TAGs (Robot syntax applies!)
        type: string
      # test-suite-path:
      #   description: Target test-suite given by it's folder name e.g. COMPOSITION_TESTS
      #   type: string
      test-suite-name:
        description: Titel of generated Robot Log/Report.html
        type: string
    steps:
      - restore-integration-tests-job-caches
      - install-python3-requirements
      - run:
          name: EXECUTE ROBOT COMMAND
          no_output_timeout: 30m
          command: |
            cd tests
            robot -v AUTH_TYPE:OAUTH \
                  --include << parameters.include-tags >> \
                  --exclude TODO -e future -e obsolete -e libtest \
                  --console dotted \
                  --loglevel TRACE \
                  --noncritical not-ready \
                  --flattenkeywords for \
                  --flattenkeywords foritem \
                  --flattenkeywords name:_resources.* \
                  --outputdir results/<< parameters.test-suite-name >> \
                  --name << parameters.test-suite-name >> \
                  robot/
      - save-integration-tests-job-caches
      - save-test-results-folder
      - store_test_results:
          path: ~/projects/tests/results/
      - store_artifacts:
          path: ~/projects/tests/results/


  save-test-results-folder:
    description: Persist Robot tests folder to workspace
    steps:
      - run:
          name: PERSIST ROBOT TEST RESULTS
          when: always
          command: echo "persist test results"
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - projects/tests/results


  restore-test-results-folder:
    description: Attach Robot tests folder back to workspace
    steps:
      - attach_workspace:
          at: /home/circleci/

          
  merge-robot-outputs:
    description: Merge Robot Results from Parallel Tests
    steps:
      - run:
          command: |
            pip install robotframework
      - run:
          name: POST PROCESS & MERGE TEST RESULTS
          when: always
          command: |
            cd tests

            # Create Log/Report with ALL DETAILS
            rebot --outputdir results \
                  --name EHRbase \
                  --exclude TODO -e future -e obsolete -e libtest \
                  --removekeywords for \
                  --removekeywords wuks \
                  --loglevel TRACE \
                  --noncritical not-ready \
                  --output EHRbase-output.xml \
                  --log EHRbase-log.html \
                  --report EHRbase-report.html \
                  results/*/*.xml
      - run:
          name: GENERATE TEST SUMMARY
          when: always
          command: |
            cd tests

            # Create JUNIT report from merged results
            rebot --outputdir results \
                  --exclude TODO -e future -e obsolete -e libtest \
                  --noncritical not-ready \
                  --xunit junit-output.xml --xunitskipnoncritical \
                  --log NONE \
                  --report NONE \
                  results/EHRbase-output.xml
      - save-test-results-folder
      - store_test_results:
          path: ~/projects/tests/results/
      - store_artifacts:
          path: ~/projects/tests/results/





  # ///////////////////////////////////////////////////////////////////////////
  # /// SDK COMMANDS (openEHR_SDK)                                          ///
  # ///////////////////////////////////////////////////////////////////////////

  git-clone-sdk-repo:
    steps:
      - run:
          name: CLONE SDK REPO
          command: |
            git clone git@github.com:ehrbase/openEHR_SDK.git
            ls -la
  

  git-checkout-sdk-sync-branch:
    steps:
      - run:
          name: CHECKOUT SDK SYNC/BRANCH
          command: |
            echo BRANCH NAME TO CHECKOUT: $BRANCH_NAME
            cd ~/projects/openEHR_SDK
            git checkout $BRANCH_NAME
  

  maven-install-sdk:
    steps:
      - run:
          name: INSTALL SDK
          command: |
            cd ~/projects/openEHR_SDK
            SDK_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            echo $SDK_VERSION > ~/projects/SDK_VERSION
            cat ~/projects/SDK_VERSION
            mvn clean install -Dmaven.javadoc.skip=true   # -Dmaven.test.skip


  start-ehrbase-and-run-java-integration-sdk-tests:
    description: |
      Starts ehrbase server and runs maven test phase using 'slow' profile defined in parent pom.xml
      This way only the Java integration tests are executed.
    steps:
      - run:
          name: Start EHRbase server and run SDK's java integration tests
          command: |
            ls -la
            cd ~/projects
            EHRbase_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            echo ${EHRbase_VERSION}
            java -jar application/target/application-${EHRbase_VERSION}.jar --cache.enabled=false > log &
            grep -m 1 "Started EhrBase in" <(tail -f log)
            cd ~/projects/openEHR_SDK
            jps
            # mvn verify -DskipIntegrationTests=false -Dmaven.javadoc.skip=true
            mvn test -Pslow -Dmaven.javadoc.skip=true
    

  start-ehrbase-and-run-all-sdk-tests:
    description: |
      Executes all SDK java tests (unit and integration)
      This requires EHRbase + DB to be running during test execution.
    steps:
      - install-maven
      - run:
          name: Start EHRbase server and run all test of SDK
          command: |
            ls -la
            EHRbase_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            echo ${EHRbase_VERSION}
            cd ~/projects    # NOTE: This is where the target folder w/ artifacts were persisted to in previous step.
            java -jar application/target/application-${EHRbase_VERSION}.jar --cache.enabled=false > log &
            grep -m 1 "Started EhrBase in" <(tail -f log)
            cd ~/projects/openEHR_SDK
            jps
            mvn verify -DskipIntegrationTests=false -Dmaven.javadoc.skip=true


  save-local-sdk-installation:
    steps:
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - .m2/repository/com/github/ehrbase/openEHR_SDK
            - projects/openEHR_SDK
            - projects/SDK_VERSION


  restore-local-sdk-installation:
    steps:
      - attach_workspace:
          at: /home/circleci/


  cache-out-sdk-m2-dependencies:
      steps:
        - run:
            name: Generate Cache Checksum for openEHR_SDK Dependencies
            command: find openEHR_SDK/ -name 'pom.xml' | sort | xargs cat > /tmp/openEHR_SDK_maven_cache_seed
        - restore_cache:
            key: openEHR_SDK-


  cache-in-sdk-m2-dependencies:
    steps:
      - save_cache:
          key: openEHR_SDK-{{ checksum "/tmp/openEHR_SDK_maven_cache_seed" }}
          paths:
          - ~/.m2


  cache-out-sdk-m2-dependencies-sync-branch:
      steps:
        - run:
            name: Generate Cache Checksum for openEHR_SDK Dependencies
            command: find openEHR_SDK/ -name 'pom.xml' | sort | xargs cat > /tmp/openEHR_SDK_syncbranch_maven_cache_seed
        - restore_cache:
            key: openEHR_SDK-syncbranch-v1-


  cache-in-sdk-m2-dependencies-sync-branch:
    steps:
      - save_cache:
          key: openEHR_SDK-syncbranch-v1-{{ checksum "/tmp/openEHR_SDK_syncbranch_maven_cache_seed" }}
          paths:
          - ~/.m2


  collect-sdk-unittest-results:
    steps:
      - run:
          name: Save unit test results
          command: |
            mkdir -p ~/sdk-test-results/unit-tests/
            find ~/projects/openEHR_SDK/ -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/sdk-test-results/unit-tests/ \;
            find ~/projects/openEHR_SDK/ -type f -regex ".*/target/surefire-reports/.*txt" -exec cp {} ~/sdk-test-results/unit-tests/ \;
          when: always
  

  collect-sdk-integrationtest-results:
    steps:
      - run:
          name: Save integration test results
          command: |
            mkdir -p ~/sdk-test-results/integration-tests/
            find ~/projects/openEHR_SDK/ -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/sdk-test-results/integration-tests/ \;
            find ~/projects/openEHR_SDK/ -type f -regex ".*/target/failsafe-reports/.*txt" -exec cp {} ~/sdk-test-results/integration-tests/ \;
          when: always

    
  save-skd-test-results:
    steps:
      - store_test_results:
          path: ~/sdk-test-results
      - store_artifacts:
          path: ~/sdk-test-results





  # ///////////////////////////////////////////////////////////////////////////
  # /// EHRBASE COMMANDS                                                    ///
  # ///////////////////////////////////////////////////////////////////////////

  force-ehrbase-build-to-use-local-sdk-version:
    steps:
      - install-xml-cli-tool
      - run:
          name: Adjust SDK version number in EHRbase's pom
          command: |
            SDK_VERSION=$(cat ~/projects/SDK_VERSION)
            echo $SDK_VERSION
            # cd ~/projects
            xmlstarlet edit --inplace -N my=http://maven.apache.org/POM/4.0.0 -u my:project/my:version -v $SDK_VERSION pom.xml

            
  build-and-test-ehrbase:
    steps:
      # - install-maven
      - force-ehrbase-build-to-use-local-sdk-version
      - run:
          name: Maven build EHRbase
          command: |
            mvn package -Dmaven.javadoc.skip=true     # -Dmaven.test.skip


  start-ehrbase-server:
    steps:
      - install-maven
      - run:
          name: Start EHRbase server and wait for it to be ready
          background: true
          command: |
            ls -la
            EHRbase_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            echo ${EHRbase_VERSION}
            java -jar application/target/application-${EHRbase_VERSION}.jar --cache.enabled=false > log &
            grep -m 1 "Started EhrBase in" <(tail -f log)
            jps


  cache-in-ehrbase-m2-dependencies-syncbranch:
    steps:
      - save_cache:
          key: EHRbase-sychbranch-v1-{{ checksum "/tmp/EHRbase_syncbranch_maven_cache_seed" }}
          paths:
            - ~/.m2


  cache-out-ehrbase-m2-dependencies-syncbranch:
    steps:
      - run:
          name: Generate Cache Checksum for EHRbase Dependencies
          command: find ~/projects -name 'pom.xml' | sort | xargs cat > /tmp/EHRbase_syncbranch_maven_cache_seed
      - restore_cache:
          key: EHRbase-sychbranch-v1-


  save-packaged-ehrbase-jar:
    steps:
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - projects/application/target

 
  restore-packaged-ehrbase-jar:
    steps:
      - attach_workspace:
          at: /home/circleci/


  collect-ehrbase-unittest-results:
    steps:
      - run:
          name: Save unit test results
          command: |
            mkdir -p ~/ehrbase-test-results/unit-tests/
            find ~/projects -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/ehrbase-test-results/unit-tests/ \;
            find ~/projects -type f -regex ".*/target/surefire-reports/.*txt" -exec cp {} ~/ehrbase-test-results/unit-tests/ \;
          when: always


  save-ehrbase-test-results:
    steps:
      - store_test_results:
          path: ~/ehrbase-test-results
      - store_artifacts:
          path: ~/ehrbase-test-results





  #                                                 88                 ad88
  #     ,d                             ,d           ""                d8"
  #     88                             88                             88
  #   MM88MMM  ,adPPYba,  ,adPPYba,  MM88MMM        88  8b,dPPYba,  MM88MMM  8b,dPPYba,  ,adPPYYba,
  #     88    a8P_____88  I8[    ""    88           88  88P'   `"8a   88     88P'   "Y8  ""     `Y8
  #     88    8PP"""""""   `"Y8ba,     88           88  88       88   88     88          ,adPPPPP88
  #     88,   "8b,   ,aa  aa    ]8I    88,          88  88       88   88     88          88,    ,88
  #     "Y888  `"Ybbd8"'  `"YbbdP"'    "Y888        88  88       88   88     88          `"8bbdP"Y8
  #

  configure-git-for-ci-bot:
    steps:
      - add_ssh_keys:
          fingerprints:
            - 3e:42:46:e1:9e:40:4d:ae:33:ab:db:0a:95:24:d2:99
      - run:
          name: Configure GIT
          command: |
            git config --global user.email "ci-bot@ehrbase.org"
            git config --global user.name "ci-bot"
            # git config --global push.followTags true
            git remote -v

  install-java-11:
    description: Install Zulu Java 11
    steps:
      - run:
          name: Install Zulu Java 11
          command: |
            wget https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-jdk_x64_linux_hotspot_11.0.3_7.tar.gz -O /tmp/openjdk-11.tar.gz
            sudo mkdir -p /usr/lib/jvm
            sudo tar xfvz /tmp/openjdk-11.tar.gz --directory /usr/lib/jvm
            rm -f /tmp/openjdk-11.tar.gz
            sudo sh -c 'for bin in /usr/lib/jvm/jdk-11.0.3+7/bin/*; do update-alternatives --install /usr/bin/$(basename $bin) $(basename $bin) $bin 100; done'
            sudo sh -c 'for bin in /usr/lib/jvm/jdk-11.0.3+7/bin/*; do update-alternatives --set $(basename $bin) $bin; done'
  
  install-maven:
    description: Install Maven tool only if it's not already installed
    steps:
      - run: 
          name: Install Maven tool
          command: |
            sudo killall -9 apt-get || true
            sudo apt -y update
            [ -f /usr/bin/mvn ] && echo "Maven is already installed." || sudo apt install maven -y
  
  install-and-configure-keycloak:
    description: Setups a Keycloak Docker instance and restores a previously exportd configuration.
    steps:
      - run:
          name: Start Keycloak in a Docker container
          command: |
            cd tests/robot/SECURITY_TESTS/I_OAuth2_Keycloak
            docker run -d --name keycloak \
              -p 8081:8080 \
              -v $(pwd)/exported-keycloak-config:/restore-keycloak-config \
              -e KEYCLOAK_USER=admin \
              -e KEYCLOAK_PASSWORD=admin \
              jboss/keycloak:10.0.2
      - run:
          name: Restore Keycloak configuration (realm, clients, roles, users)
          background: true
          command: |
            docker exec -it keycloak /opt/jboss/keycloak/bin/standalone.sh \
              -Djboss.socket.binding.port-offset=100 \
              -Dkeycloak.migration.action=import \
              -Dkeycloak.migration.provider=dir \
              -Dkeycloak.profile.feature.upload_scripts=enabled \
              -Dkeycloak.migration.dir=/restore-keycloak-config \
              -Dkeycloak.migration.strategy=OVERWRITE_EXISTING
      - run:
          name: Wait until Keycloak configuration import is complete
          command: |
            echo
            echo "Wait for Keycloak to be ready"
            echo "============================="
            echo
            while ! (docker container logs keycloak | fgrep -q "Keycloak 10.0.2 (WildFly Core 11.1.1.Final) started in");
                do sleep 1;
                # uncomment next line to see progress in terminal
                #docker container logs --tail 3 --raw keycloak;
                echo "... waiting for keycloak ...";
            done
            echo "KEYCLOAK READY"
  

  install-xml-cli-tool:
    steps:
      - run:
          name: Install xmlstarlet to handle XML file from CLI
          command: |
            sudo killall -9 apt-get || true
            sudo apt -y update && sudo apt -y install xmlstarlet


  configure-python-version:
    description: Configure Python version to 3.7.0
    steps:
      - run:
          name: Configure Python version to 3.7.0
          command: |
            pyenv global 3.7.0

  install-python-requirements:
    description: Install Python requirements
    steps:
      - run:
          name: Install Python requirements
          command: |
            python -c "import site; print(site.getsitepackages())"
            pip install -r ~/projects/tests/requirements.txt

  install-python3-requirements:
    description: Install Python requirements
    steps:
      - run:
          name: Install Python requirements
          command: |
            python3 -c "import site; print(site.getsitepackages())"
            pip3 install -r ~/projects/tests/requirements.txt

  setup-database:
    description: Setup ehrbase database
    steps:
      - run:
          name: Setup database
          command: |
            docker run  -d --name ehrdb \
                        -e POSTGRES_USER=$POSTGRES_USER \
                        -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD -d \
                        -e DISABLE_SECURITY=true \
                        -p 5432:5432 ehrbaseorg/ehrbase-database-docker:11.5


  setup-file-repo:
    description: Setup file repo
    steps:
      - run:
          name: Unzip provided file repo
          command: |
            unzip ~/projects/.circleci/file_repo_content.zip -d ~/projects

  setup-jacoco-distribution:
    description: Download and unzip Jacoco distribution
    steps:
      - run:
          name: Download and unzip Jacoco disribution
          command: |
            mkdir -p ~/download
            cd ~/download
            [ -e jacoco-0.8.2.zip ] || wget https://repo1.maven.org/maven2/org/jacoco/jacoco/0.8.2/jacoco-0.8.2.zip
            mkdir -p ~/jacoco-0.8.2
            unzip -uo jacoco-0.8.2.zip -d ~/jacoco-0.8.2

  collect-integration-coverage:
    description: Collect integration test coverage
    steps:
      - run:
          name: Collect integration test coverage
          command: |
            java -jar ~/jacoco-0.8.2/lib/jacococli.jar dump \
              --destfile=/home/circleci/projects/application/target/jacoco-it.exec





  #                             88
  #                             ""    ,d             ,d                             ,d
  #                                   88             88                             88
  #   88       88  8b,dPPYba,   88  MM88MMM        MM88MMM  ,adPPYba,  ,adPPYba,  MM88MMM  ,adPPYba,
  #   88       88  88P'   `"8a  88    88             88    a8P_____88  I8[    ""    88     I8[    ""
  #   88       88  88       88  88    88             88    8PP"""""""   `"Y8ba,     88      `"Y8ba,
  #   "8a,   ,a88  88       88  88    88,            88,   "8b,   ,aa  aa    ]8I    88,    aa    ]8I
  #    `"YbbdP'Y8  88       88  88    "Y888          "Y888  `"Ybbd8"'  `"YbbdP"'    "Y888  `"YbbdP"'
  #

  maven-test:
    description: Test Maven app
    steps:
      - run:
          name: Test Maven app
          command: |
            cd ~/projects
            mvn org.jacoco:jacoco-maven-plugin:0.8.2:prepare-agent test \
                org.jacoco:jacoco-maven-plugin:0.8.2:report

  persist-unit-test-coverage:
    description: Persist unit test coverage report to workspace
    steps:
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - projects/rest-ehr-scape/target/site/jacoco/jacoco.xml
            - projects/rest-openehr/target/site/jacoco/jacoco.xml
            - projects/serialisation/target/site/jacoco/jacoco.xml
            - projects/service/target/site/jacoco/jacoco.xml
            - projects/terminology/target/site/jacoco/jacoco.xml
            - projects/validation/target/site/jacoco/jacoco.xml

  save-unit-tests-job-caches:
    description: Save all caches in unit tests job
    steps:
      - save_cache:
          key: job-unit-tests-v1-mvn-dependencies-{{ checksum "~/projects/pom.xml" }}
          paths:
            - ~/.m2/repository

  restore-unit-tests-job-caches:
    description: Restore all caches in unit tests job
    steps:
      - restore_cache:
          keys:
            - job-unit-tests-v1-mvn-dependencies-{{ checksum "~/projects/pom.xml" }}
            - job-unit-tests-v1-mvn-dependencies





  #
  #
  #
  #   88,dPYba,,adPYba,   ,adPPYYba,  8b       d8   ,adPPYba,  8b,dPPYba,
  #   88P'   "88"    "8a  ""     `Y8  `8b     d8'  a8P_____88  88P'   `"8a
  #   88      88      88  ,adPPPPP88   `8b   d8'   8PP"""""""  88       88
  #   88      88      88  88,    ,88    `8b,d8'    "8b,   ,aa  88       88
  #   88      88      88  `"8bbdP"Y8      "8"       `"Ybbd8"'  88       88
  #

  maven-package:
    description: Package Maven app
    steps:
      - run:
          name: Package Maven app
          command: |
            cd ~/projects
            mvn package -DskipTests





  #
  #
  #
  #   ,adPPYba,   ,adPPYba,   8b,dPPYba,   ,adPPYYba,  8b,dPPYba,
  #   I8[    ""  a8"     "8a  88P'   `"8a  ""     `Y8  88P'   "Y8
  #    `"Y8ba,   8b       d8  88       88  ,adPPPPP88  88
  #   aa    ]8I  "8a,   ,a8"  88       88  88,    ,88  88
  #   `"YbbdP"'   `"YbbdP"'   88       88  `"8bbdP"Y8  88
  #

  run-sonar-analysis:
    description: Run Sonar analysis
    steps:
      - run:
          name: Install sonar scanner
          command: |
            mkdir -p ~/downloads
            cd ~/downloads
            [ -e sonar-scanner-cli-4.2.0.1873-linux.zip ] || wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip
            unzip -uo sonar-scanner-cli-4.2.0.1873-linux.zip -d ~
      - run:
          name: Excecute Sonar analysis
          command: |
            chmod 744 ~/projects/.circleci/*.sh
            ~/sonar-scanner-4.2.0.1873-linux/bin/sonar-scanner \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.branch.name=$CIRCLE_BRANCH \
            -Dsonar.branch.target=$(~/projects/.circleci/get_target_branch.sh) \
            -Dsonar.projectVersion=$(~/projects/.circleci/verify_and_return_version.sh)

  run-dependency-check:
    description: Run dependency vulnerability analysis
    steps:
      - run:
          name: Install dependency check
          command: |
            mkdir -p ~/downloads
            cd ~/downloads
            [ -e dependency-check-5.2.2-release.zip ] || wget https://dl.bintray.com/jeremy-long/owasp/dependency-check-5.2.2-release.zip
            mkdir -p ~/dependency_check
            unzip -uo dependency-check*.zip -d ~
      - run:
          name: Run dependency vulnerability analysis
          command: |
            cd ~/projects
            ~/dependency-check/bin/dependency-check.sh \
                --project "EHRBase" --format JSON \
                -o vulnerability_analysis.json --scan .
      - run:
          name: Convert vulnerability analysis to sonar issues
          command: |
            # pyenv global 3.7.0
            python3 ~/projects/.circleci/convert_vulnerability_analysis.py \
                ~/projects/vulnerability_analysis.json \
                ~/projects/sonar_issues.json \
                application/src/main/java/org/ehrbase/application/EhrBase.java





  #                                                88
  #                                                88
  #                                                88
  #   8b      db      d8   ,adPPYba,   8b,dPPYba,  88   ,d8   ,adPPYba,  8b,dPPYba,   ,adPPYYba,   ,adPPYba,   ,adPPYba,
  #   `8b    d88b    d8'  a8"     "8a  88P'   "Y8  88 ,a8"    I8[    ""  88P'    "8a  ""     `Y8  a8"     ""  a8P_____88
  #    `8b  d8'`8b  d8'   8b       d8  88          8888[       `"Y8ba,   88       d8  ,adPPPPP88  8b          8PP"""""""
  #     `8bd8'  `8bd8'    "8a,   ,a8"  88          88`"Yba,   aa    ]8I  88b,   ,a8"  88,    ,88  "8a,   ,aa  "8b,   ,aa
  #       YP      YP       `"YbbdP"'   88          88   `Y8a  `"YbbdP"'  88`YbbdP"'   `"8bbdP"Y8   `"Ybbd8"'   `"Ybbd8"'
  #                                                                      88
  #                                                                      88

  persist-tests-folder:
    description: Persist Robot tests folder to workspace
    steps:
      - run:
          when: always
          command: |
            echo "persist test results"
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - projects/tests/results

  attach-tests-folder:
    description: Attach Robot tests folder back to workspace
    steps:
      - attach_workspace:
          at: /home/circleci

  persist-integration-test-coverage:
    description: Persist integration test coverage report to workspace
    steps:
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - projects/application/target/jacoco-it.exec

  persist-target-folder:
    description: Persist target folder to workspace
    steps:
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - projects/application/target

  attach-target-folder:
    description: Attach target folder back to workspace
    steps:
      - attach_workspace:
          at: /home/circleci

  persist-dependency-check-results:
    description: Persist dependency check results
    steps:
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - projects/sonar_issues.json





  #                                           88
  #                                           88
  #                                           88
  #        ,adPPYba,  ,adPPYYba,   ,adPPYba,  88,dPPYba,    ,adPPYba,
  #       a8"     ""  ""     `Y8  a8"     ""  88P'    "8a  a8P_____88
  #       8b          ,adPPPPP88  8b          88       88  8PP"""""""
  #       "8a,   ,aa  88,    ,88  "8a,   ,aa  88       88  "8b,   ,aa
  #        `"Ybbd8"'  `"8bbdP"Y8   `"Ybbd8"'  88       88   `"Ybbd8"'
  #


  save-integration-tests-job-caches:
    description: Save all caches in interation tests job
    steps:
      - run:
          when: always
          command: echo "save integration test cache"
      - save_cache:
          key: job-integration-tests-v1-download-0.8.2
          paths:
            - ~/downloads
      - save_cache:
          key: job-integration-tests-v1-installation-0.8.2
          paths:
            - ~/jacoco-0.8.2
      - save_cache:
          key: job-integration-tests-v2-pip-{{ checksum "~/projects/tests/requirements.txt" }}
          paths:
            - ~/.cache/pip
            # - /opt/circleci/.pyenv/versions/3.7.0/lib/python3.7/site-packages
      - save_cache:
          key: google-chrome-incl-webdriver-75
          paths:
            - ~/downloads/chrome

  restore-integration-tests-job-caches:
    description: Restore all caches in interation tests job
    steps:
      - restore_cache:
          keys:
            - job-integration-tests-v1-download-0.8.2
      - restore_cache:
          keys:
            - job-integration-tests-v1-installation-0.8.2
      - restore_cache:
          keys:
            - job-integration-tests-v2-pip-{{ checksum "~/projects/tests/requirements.txt" }}
      - restore_cache:
          keys: google-chrome-incl-webdriver-

  save-dependency-check-job-caches:
    description: Save all caches in dependency check job
    steps:
      - save_cache:
          key: job-dependency-check-v1-download-5.2.2
          paths:
            - ~/downloads
      - save_cache:
          key: job-dependency-check-v1-installation-and-database-{{ epoch }}
          paths:
            - ~/dependency-check

  restore-dependency-check-job-caches:
    description: Restore all caches in dependency check job
    steps:
      - restore_cache:
          keys:
            - job-dependency-check-v1-download-5.2.2
      - restore_cache:
          keys:
            - job-dependency-check-v1-installation-and-database

  save-build-artifacts-job-caches:
    description: Save all caches in building artifacts job
    steps:
      - save_cache:
          key: job-build-artifacts-v1-mvn-dependencies-{{ checksum "~/projects/pom.xml" }}
          paths:
            - ~/.m2/repository

  restore-build-artifacts-job-caches:
    description: Restore all caches in building artifacts job
    steps:
      - restore_cache:
          keys:
            - job-build-artifacts-v1-mvn-dependencies-{{ checksum "~/projects/pom.xml" }}
            - job-build-artifacts-v1-mvn-dependencies

  save-sonar-analysis-job-caches:
    description: Save all caches in dependency check job
    steps:
      - save_cache:
          key: job-sonar-analysis-v1-download-4.2.0.1873
          paths:
            - ~/downloads
      - save_cache:
          key: job-sonar-analysis-v1-installation-4.2.0.1873
          paths:
            - ~/sonar-scanner-4.2.0.1873-linux
      - save_cache:
          key: job-sonar-analysis-v1-scannerwork-{{ epoch }}
          paths:
            - ~/projects/.scannerwork
      - save_cache:
          key: job-sonar-analysis-v1-user-cache-{{ epoch }}
          paths:
            - ~/.sonar/cache

  restore-sonar-analysis-job-caches:
    description: Restore all caches in dependency check job
    steps:
      - restore_cache:
          keys:
            - job-sonar-analysis-v1-download-4.2.0.1873
      - restore_cache:
          keys:
            - job-sonar-analysis-v1-installation-4.2.0.1873
      - restore_cache:
          keys:
            - job-sonar-analysis-v1-scannerwork
      - restore_cache:
          keys:
            - job-sonar-analysis-v1-user-cache

  save-caches:
    description: Save all caches
    steps:
      - save_cache:
          paths:
            - ~/.m2/repository
          key: v1-mvn-dependencies-{{ checksum "pom.xml" }}

      - save_cache:
          paths:
            - ~/dependency-check
          key: v1-dependency-check-{{ epoch }}

  restore-caches:
    description: Restore all caches
    steps:
      - restore_cache:
          keys:
            - v1-mvn-dependencies-{{ checksum "pom.xml" }}
            - v1-mvn-dependencies-
      - restore_cache:
          keys:
            - v1-dependency-check-





# ///////////////////////////////////////////////////////////////////////////
# /// CIRCLECI META                                                       ///
# ///////////////////////////////////////////////////////////////////////////


orbs:
  maven: circleci/maven@1.0.1
  openjdk-install: cloudesire/openjdk-install@1.2.3
  sonarcloud: sonarsource/sonarcloud@1.0.2

executors:
  docker-python3-java11:
    working_directory: ~/projects
    docker:
      - image: circleci/python@sha256:e1c98a85c5ee62ac52a2779fe5abe2677f021c8e3158e4fb2d569c7b9c6ac073

  docker-py3-java11-postgres:
    working_directory: ~/projects
    docker:
      - image: circleci/python@sha256:e1c98a85c5ee62ac52a2779fe5abe2677f021c8e3158e4fb2d569c7b9c6ac073
      - image: ehrbaseorg/ehrbase-postgres:10
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

  machine-ubuntu-1604:
    description: |
      Ubuntu 1604 VM
      - Python/Python3
      - Pip/Pip3
      - Java 8 and Maven
      - Docker 18.06
      - Docker-Compose 1.22.0
    working_directory: ~/projects
    environment:
      PIPELINE_ID: << pipeline.id >>
      BRANCH_NAME: << pipeline.git.branch >>
    machine:
      # image: circleci/classic:201808-01
      # image: ubuntu-1604:201903-01
      image: ubuntu-1604:202007-01


  # NOTE: this is a preview image, will be released officially in September 2020
  #       don't use before that, cause can get breaking changes
  machine-ubuntu-2004:
    description: |
      Ubuntu 20.04 VM (machine executor)
      - openjdk 1.8
      - openjdk 11.0.8 (default)
      - maven 3.6.3
      - gradle 6.6
      - python 2.7.17
      - python 3.8.5
      - pip/pip3
      - docker 19.03.12
      - docker-compose 1.26.2
      - aws-cli 2.0.43
      - google cloud sdk 307.0.0
      - heroku 7.42.12
      - chrome 85.0.4183
      - chromedriver 85.0.4183
      - firefox 80.0.0
      - go 1.15
      - leiningen 2.9.4
      - node 12.18.3 (default)
      - node 14.8.0
      - ruby 2.7.1
      - sbt 1.3.13
      - yarn 1.22.4
    working_directory: ~/projects
    environment:
      PIPELINE_ID: << pipeline.id >>
      BRANCH_NAME: << pipeline.git.branch >>
    machine:
      image: ubuntu-2004:202008-01










# oooooooooo.        .o.         .oooooo.   oooo    oooo ooooo     ooo ooooooooo.
# `888'   `Y8b      .888.       d8P'  `Y8b  `888   .8P'  `888'     `8' `888   `Y88.
#  888     888     .8"888.     888           888  d8'     888       8   888   .d88'
#  888oooo888'    .8' `888.    888           88888[       888       8   888ooo88P'
#  888    `88b   .88ooo8888.   888           888`88b.     888       8   888
#  888    .88P  .8'     `888.  `88b    ooo   888  `88b.   `88.    .8'   888
# o888bood8P'  o88o     o8888o  `Y8bood8P'  o888o  o888o    `YbodP'    o888o
#
# [ BACKUP ]

# upload-test-status-report-to-slack:
#   description: Uploads status report to Slack
#   steps:
#       - run:
#           name: Upload test status report to Slack
#           command: |
#               curl -F file=@/home/circleci/projects/tests/results/test-status-report.png \
#                    -F channels=playground \
#                    -F title="${CIRCLE_PROJECT_REPONAME} TEST STATUS | ${CIRCLE_BRANCH}"  \
#                    -H "Authorization: Bearer xoxp-701547379457-696494594291-710681511959-9c9a861be3770efdd4f8637a076bf8c8" \
#                    https://slack.com/api/files.upload

# save-chrome-and-chromedirver-download-cache:
#   description: Save Google Chrome and chromedriver download to cache
#   steps:
#     - save_cache:
#         key: google-chrome-incl-webdriver-{{ $CHROME_VERSION }}
#         paths:
#           - ~/downloads/chrome
#
#
# restore-chrome-and-chromedirver-download-cache:
#   description: Restore Google Chrome and chromedriver download from cache
#   steps:
#     - restore_cache:
#         key: google-chrome-incl-webdriver-

# COMPOSITION-tests-1:
#     machine:
#       image: ubuntu-1604:201903-01
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#     steps:
#       - configure-python-version
#       - checkout
#       - restore-integration-tests-job-caches
#       - setup-jacoco-distribution
#       - attach-target-folder
#       - install-python-requirements
#       - run-integration-tests:
#           include: "compositionANDjson1"
#       - save-integration-tests-job-caches

# run-integration-tests:
#   description: Run integration tests
#   parameters:
#     include:
#       type: string
#       default: xxx
#   steps:
#       - run:
#           name: Run integration tests with coverage
#           no_output_timeout: 45m
#           command: |
#               cd tests
#               robot -d results --console dotted --noncritical not-ready -L TRACE \
#                     -i << parameters.include >> \
#                     -e libtest \
#                     -e obsolete \
#                     -e future \
#                     -e TODO \
#                     -e circleci \
#                     -e EHRSCAPE \
#                     --xunit junit-output.xml --xunitskipnoncritical \
#                     -v CODE_COVERAGE:True \
#                     -v JACOCO_LIB_PATH:/home/circleci/jacoco-0.8.2/lib \
#                     -v COVERAGE_DIR:/home/circleci/projects/application/target robot/

# set-slack-build-status:
#   description: Set status env at the end of a job based on success or failure.
#   steps:
#       - run:
#           name: Slack - Setting Failure Condition
#           when: on_fail
#           command: |
#               echo 'export SLACK_BUILD_STATUS="FAIL"' >> $BASH_ENV
#       - run:
#           when: on_success
#           name: Slack - Setting Success Condition
#           command: |
#             echo 'export SLACK_BUILD_STATUS="PASS"' >> $BASH_ENV

# provide-test-status-report-via-slack:
#   description: Generates an integration test status report and sends it to our Slack channel
#   steps:
#       - set-slack-build-status
#       - run:
#           name: Download and install Chrome and Chromedriver
#           when: always
#           command: |
#               mkdir -p ~/downloads/chrome
#               cd ~/downloads/chrome
#               sudo killall -9 apt-get || true && \
#               sudo apt-get update && \
#               sudo apt-get install -f lsb-release libappindicator3-1
#               [ -e google-chrome.deb ] || curl -L -o google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
#               sudo dpkg --configure -a
#               sudo dpkg -i google-chrome.deb
#               sudo sed -i 's|HERE/chrome"|HERE/chrome" --no-sandbox|g' /opt/google/chrome/google-chrome
#               rm google-chrome.deb
#               CHROME_VERSION=$(google-chrome --version | sed -r 's/[^0-9]+([0-9]+\.[0-9]+\.[0-9]+).*/\1/g')
#               CHROMEDRIVER_VERSION=$(curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION)
#               [ -e chromedriver_linux64.zip ] || wget https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip
#               unzip chromedriver_linux64.zip
#               sudo mv chromedriver /usr/local/bin/chromedriver
#               sudo chown root:root /usr/local/bin/chromedriver
#               sudo chmod +x /usr/local/bin/chromedriver
#       - run:
#           name: Check Browser Versions
#           when: always
#           command: |
#               which chromedriver
#               chromedriver --version
#               google-chrome --version
#       - run:
#           name: Generate and Send  Test Report To Slack Channel
#           when: always
#           command: |
#               cd tests
#               cp robot/_resources/status_report.robot  results/status_report.robot
#               cp robot/_resources/slack-message.json  results/slack-message.json
#               cp robot/_resources/logo.jpg results/logo.jpg
#               cd results
#               robot -d trash --output NONE --log NONE --noncritical chill status_report.robot
#       - store_test_results:
#           path: ~/projects/tests/results/
#       - store_artifacts:
#           path: ~/projects/tests/results/
