import argparse
import json


class Vulnerability:
    def __init__(self, severity, dependency_name, vulnerability_name, cwes):
        self.severity = severity
        self.dependency_name = dependency_name
        self.vulnerability_name = vulnerability_name
        self.cwes = cwes


def convert_severity_to_sonar(vulnerability_severity):
    if vulnerability_severity.lower() == 'none':
        return 'INFO'
    elif vulnerability_severity.lower() == 'low':
        return 'MINOR'
    elif vulnerability_severity.lower() == 'medium':
        return 'MAJOR'
    elif vulnerability_severity.lower() == 'high':
        return 'CRITICAL'
    elif vulnerability_severity.lower() == 'critical':
        return 'BLOCKER'
    else:
        return 'MAJOR'


def parse_vulnerabilities(json_content):
    vulnerabilities = []
    for dependency in json_content['dependencies']:
        if 'vulnerabilities' in dependency.keys():
            for vulnerability in dependency['vulnerabilities']:
                vulnerabilities.append(Vulnerability(
                    vulnerability['severity'],
                    dependency['fileName'],
                    vulnerability['name'],
                    vulnerability['cwes'][0] if len(vulnerability['cwes']) > 0 else 'no cwe'
                ))
    return vulnerabilities


def write_issues(vulnerabilities, dest_filename, issue_target_filename):
    issue_content = {'issues': []}
    for v in vulnerabilities:
        issue_content['issues'].append(
            {
                'engineId': 'dependency-check-converter',
                'ruleId': 'dependency-check',
                'severity': convert_severity_to_sonar(v.severity),
                'type': 'VULNERABILITY',
                'primaryLocation': {
                    'message': '{} - {} - {}'.format(v.dependency_name, v.vulnerability_name, v.cwes),
                    'filePath': issue_target_filename
                }
            }
        )
    with open(dest_filename, 'w') as f:
        json.dump(issue_content, f)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('in_file')
    parser.add_argument('out_file')
    parser.add_argument('issue_target_file')
    args = parser.parse_args()
    with open(args.in_file, 'r') as f:
        content = json.load(f)
    vulnerabilities = parse_vulnerabilities(content)
    write_issues(vulnerabilities, args.out_file, args.issue_target_file)


if __name__ == '__main__':
    main()
